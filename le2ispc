#!/usr/bin/env php
<?php

/**************************************************************************************************************
*                                                                                                             *
*                                         HERE BE DRAGONS                                                     *
*                                                                                                             *
**************************************************************************************************************/

$confVersion  = "2016-01-14-1";


# Include the le2ispc config
require_once('/root/.le2ispc/le2ispc.conf.php');
require_once('/root/.le2ispc/subdomain.conf.php');
# Check if the versions are identical
if ( $version != $confVersion ) {
    echo "The config file was altered.
Please update your config file at /root/.le2ispc/le2ispc.conf.php
to the current version located at https://github.com/sjau/le2ispc/blob/master/le2ispc.conf.php";
    exit;
}



# Include ISPConfig config file for DB connection
require_once('/usr/local/ispconfig/server/lib/config.inc.php');



# Check valid call
$USAGE = "Usage: $argv[0] [-n|--dry-run] domain.tld [sub.domain.tld ...]\n";

if (count($argv) < 1) {
     echo $USAGE;
     exit(1);
}



# Get first arg
$dry_run = false;
$arg = array_shift($argv);
$arg = array_shift($argv);
if($arg == '-n' || $arg == '--dry-run') {
    $dry_run = true;
    $arg = array_shift($argv);
}



# Get the domain
echo "- Get the domain name(s): $arg.\n";
$domain = $arg;
$subdomains = isset($subdomainsConf[$domain]) ? $subdomainsConf[$domain] : array(); //$argv; // include from subdomain.conf.php - it dosent fork for renewal

# Query the MySQL DB Directly whether $domain is a vhost
echo "- Query MySQL whether it's a vhost.\n";
try {
    $db = new PDO('mysql:host=' . $conf['db_host'] . ';dbname=' . $conf['db_database'], $conf['db_user'], $conf['db_password']);
}
catch (PDOException $e) {
    echo "There was an unexpected error. Couldn't connect to the DB.";
}
$stmt = $db->prepare("SELECT * FROM `web_domain` WHERE `domain` LIKE ? AND `type` LIKE 'vhost%'");
$stmt->execute(array($domain));
$count = $stmt->rowCount();
if ($count != 1) {
    // In case you use alias as primary domain
    echo "- Query MySQL whether it's a alias.\n";
    $aliasStmt = $db->prepare("SELECT * FROM `web_domain` WHERE `domain` LIKE ? AND `type` LIKE 'alias%'");
    $aliasStmt->execute(array($domain));
    $count = $aliasStmt->rowCount();
    if ($count == 0) {
        echo "Domain name '$domain' could not be found in the ISPC DB. Please try again.";
        exit;
    }
    $row = $aliasStmt->fetchAll(PDO::FETCH_ASSOC);
    $aliasInfo = $row[0];

    echo "- Query MySQL info for domain from alias.\n";
    // this part is for NGINX only to create web root in specific web root dirrectory
    $stmt = $db->prepare("SELECT * FROM `web_domain` WHERE `domain_id` = ?");
    $stmt->execute(array($aliasInfo['parent_domain_id']));

}
$row = $stmt->fetchAll(PDO::FETCH_ASSOC);
$domainInfo = $row[0];
# Set two vars that are required for Soap Connection
$domain_id = $domainInfo['domain_id'];
$server_id = $domainInfo['server_id'];



# Check if ther's a 'www' subdomain set
$www_subdomain = 'www.' . $domain;
if (in_array($domainInfo['subdomain'], array('www','*')) && !in_array($www_subdomain, $subdomains)) {
    $domains = "-d '$domain' -d 'www.$domain'";
} else {
    $domains = "-d '$domain'";
}

# Add subdomains to domain list
foreach ($subdomains as $subdomain) {
    $domains .= " -d '$subdomain'";
}

# Make sure webroot authentication works for both
echo "- Prepare Server for webroot authentication.\n";
# https://letsencrypt.readthedocs.org/en/latest/api/plugins/webroot.html?highlight=webroot#module-letsencrypt.plugins.webroot
if ( $server['type'] == 'apache' ) {
    # Create dirs for acme-challenge
    @mkdir("/var/www/.well-known/acme-challenge", 0777, true);
    @chmod("/var/www/.well-known", 0777);
    @chmod("/var/www/.well-known/acme-challenge", 0777);
    if ( $server['version'] == '2.4' ) {
        $confFile='/etc/apache2/conf-available/letsencrypt-webroot.conf';
        $txt = '
            RewriteEngine On
            Alias /.well-known /var/www/.well-known
            <Directory /var/www/.well-known>
                Options +FollowSymLinks
                AllowOverride All
                Require all granted
            </Directory>
        ';
    } elseif ( $server['version'] == '2.2' ) {
        $confFile='/etc/apache2/conf.d/letsencrypt-webroot.conf';
        $txt = '
            RewriteEngine On
            Alias /.well-known /var/www/.well-known
            <Directory /var/www/.well-known>
                Options +FollowSymLinks
                AllowOverride All
                Order allow,deny
                Allow from all
            </Directory>
        ';

    } else {
        echo "You did not supply the apache version you're using. Please check /root/.le2ispc/le2ispc.conf.php and retry.";
        exit;
    }
    # Check if we already added apache conf
    if ( ! file_exists($confFile) ) {
        $file = fopen($confFile, "w") or die("Unable to open file!");
        fwrite($file, $txt);
        fclose($file);
        # Restart apache & load modules
        @shell_exec("a2enmod rewrite");
        @shell_exec("a2enconf letsencrypt-webroot.conf");
        @shell_exec("systemctl reload apache2");
        @shell_exec("service apache2 reload");
        sleep(5);
    }
} elseif ($server['type'] == 'nginx' ) {
# copy file from /usr/local/ispconfig/server/conf/nginx_vhost.conf.master to /usr/local/ispconfig/server/conf-custom/nginx_vhost.conf.master
# Edit and put this line before ## Disable .htaccess and other hidden files
#   #configure custom nginx template
#   # Enable letsencrypt
#   location ~ /.well-known {
#       allow all;
#       default_type text/plain;
#   }
#   
#   ## Disable .htaccess and other hidden files
#   location ~ /\. {
#       deny all;
#       access_log off;
#       log_not_found off;
#   }
} else {
    echo "No valid server setting in the configuration. Please fix.";
    exit;
}



# Disable Webserver Modules while Let's Encrypt is running
if( $server['type'] == 'apache' && $server["modules"] != "") {
    $modules = explode(',',$server["modules"]);
    foreach ($modules as $module) {
        @shell_exec("a2dismod $module");
    }
    @shell_exec("service apache2 reload");
}



# Run letsencrypt to create the certs;  --agree-eula is on current git (no Beta Testing) not required
echo "- Run Let's Encrypt Tool\n";
$webroot = "/var/www/";
if ($server['type'] == 'nginx') 
{
    $webroot = $domainInfo['document_root'].'/web';
    if(isset($aliasInfo))
    {
        echo "Test alias redirect path";
        if(!empty($aliasInfo['redirect_path']) && strrpos($aliasInfo['redirect_path'], 'http', -strlen($aliasInfo['redirect_path'])) === false)
        {
            $webroot .= $aliasInfo['redirect_path'];
        }
    }
} 
$command = "$letsencrypt --text --agree-tos --renew-by-default --rsa-key-size 4096 --email '$email' $domains -a webroot --webroot-path " . $webroot . " certonly";
if ($dry_run) {
    echo $command;
    echo "\nNothing executed (dry-run)\n";
    exit;
}
$output = shell_exec($command);

if (strpos($output, 'Congratulations') === false) {
    echo "Sorry, there was some error. Please check:\n";
    echo $output;
    exit;
}



# Re-enable the disabled modules
if( $server['type'] == 'apache' && $server["modules"] != "") {
    $modules = explode(',',$server["modules"]);
    foreach ($modules as $module) {
        @shell_exec("a2enmod $module");
    }
    @shell_exec("service apache2 reload");
}



# Read the SSL info into vars
echo "- Read SSL info into vars.\n";
$cert     = file_get_contents('/etc/letsencrypt/live/' . $domain . '/cert.pem');
$privkey  = file_get_contents('/etc/letsencrypt/live/' . $domain . '/privkey.pem');
$bundle   = file_get_contents('/etc/letsencrypt/live/' . $domain . '/chain.pem');



# Insert SSL info via API
echo "- Insert SSL info via API.\n";
$client = newSoapConnection ($server);
$params = loadDomainData ($server, $client, $domain_id);
# Update params array with new directives
$params['ssl']          = 'y';
$params['ssl_domain']   = $domain;
$params['ssl_key']      = $privkey;
$params['ssl_cert']     = $cert;
$params['ssl_bundle']   = $bundle;
$params['ssl_action']   = 'save';
# Forced ssl redirect
if ( $server['type'] == 'apache' && $forceSSL == 'y' ) {
    # Check if the apache directives already contain forced rewrite
    if (strpos($params['apache_directives'], 'RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI}') === false) {
        # No rewrite rules detected, so lets add it
        $params['apache_directives'] = "
            RewriteEngine On
            RewriteCond %{HTTPS} off
            RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]
            "
            . $params['apache_directives'];
    }
} elseif ( $server['type'] == 'nginx' && $forceSSL == 'y' ) {
    if (strpos($params['nginx_directives'], 'if ($scheme = http) {') === false) {
        # No rewrite rules detected, so lets add it
        $params['nginx_directives'] = '
            if ($scheme = http) {
                return 301 https://$server_name$request_uri;
            }
            '
            . $params['nginx_directives'];
    }
}
# Store altered data in ISPC
saveDomainData ($server, $client, $server_id, $domain_id, $params);
closeSoapConnection ($server, $client);
echo "Done.\n";






# Functions for making Soap Connection, fetching and storing domain data
function newSoapConnection ($server) {
    $client = new SoapClient(
        null,
        array(
            'location' => $server['soap_uri'] . 'index.php',
            'uri'      => $server['soap_uri'],
            'trace' => 1,
            'stream_context'=> stream_context_create(
            array(
                'ssl'=> array(
                    'verify_peer'=>false,
                    'verify_peer_name'=>false
                )
            )
        ),
        'exceptions' => 1
        )
    );
    return($client);
}



function loadDomainData ($server, $client, $domain_id) {
  global $domainInfo;
    $session_id = $client->login($server['username'], $server['password']);
    if ($domainInfo['type']=='vhost') {
      $params = $client->sites_web_domain_get($session_id, $domain_id);
    }
    elseif($domainInfo['type']=='vhostsubdomain') {
      $params = $client->sites_web_subdomain_get($session_id, $domain_id);
    }
    return($params);
}



function saveDomainData ($server, $client, $server_id, $domain_id, $params) {
  global $domainInfo;
    $session_id = $client->login($server['username'], $server['password']);
    if ($domainInfo['type']=='vhost') {
      $params = $client->sites_web_domain_update($session_id, $server_id, $domain_id, $params);
    }
    elseif($domainInfo['type']=='vhostsubdomain') {
      $params = $client->sites_web_vhost_subdomain_update($session_id, $server_id, $domain_id, $params);
    }
}



function closeSoapConnection ($server, $client) {
    $session_id = $client->login($server['username'], $server['password']);
    $client->logout($session_id);
}

?>
